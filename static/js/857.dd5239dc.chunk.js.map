{"version":3,"file":"static/js/857.dd5239dc.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__UsGGH\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__0mFV-\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__3XyHy\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__swAOm\",\"loading\":\"NewCommentForm_loading__8D33s\",\"control\":\"NewCommentForm_control__t1Jt9\",\"actions\":\"NewCommentForm_actions__8Y3RK\"};","import { useEffect, useRef, useState } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const [isEmpty, setIsEmpty] = useState(false);\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n\n    if (enteredText.trim().length === 0) {\n      setIsEmpty(true);\n    } else {\n      setIsEmpty(false);\n    }\n\n    if (!isEmpty) {\n      // send comment to server\n      sendRequest({\n        commentData: { text: enteredText },\n        quoteId: props.quoteId,\n      });\n      commentTextRef.current.value= ''\n    }\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea\n          id=\"comment\"\n          rows=\"5\"\n          ref={commentTextRef}\n          required\n        ></textarea>\n      </div>\n      {isEmpty && <p>Can't post an empty comment!</p>}\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport CommentsList from './CommentsList'\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId)\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments) {\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if(status === 'completed' &&(!loadedComments || loadedComments.length === 0)){\n    comments = <p>No comments were added yet</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n     {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__-QJOv\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\r\nimport { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  const {quoteId} = params;\r\n\r\n  const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true)\r\n\r\n  useEffect(()=>{\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId])\r\n\r\n  if(status === 'pending'){\r\n    return <div className=\"centered\">\r\n      <LoadingSpinner />\r\n    </div>\r\n  }\r\n\r\n  if(error) {\r\n    return <p className=\"centered\">{error}</p>\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p className=\"centered\">No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={`${match.path}`} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`} exact>\r\n        <Comments />\r\n      </Route>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"names":["props","className","classes","text","comments","map","comment","id","useState","isEmpty","setIsEmpty","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","trim","length","commentData","quoteId","onSubmit","LoadingSpinner","htmlFor","rows","ref","required","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","onClick","author","params","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"sourceRoot":""}